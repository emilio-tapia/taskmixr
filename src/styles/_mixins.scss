@mixin flexDisplay(
  $align: center,
  $justify: center,
  $direction: column,
  $wrap: wrap
) {
  display: flex;
  align-items: $align;
  justify-content: $justify;
  flex-direction: $direction;
  flex-wrap: $wrap;
}

@mixin gridCenter($placeContent: center) {
  display: grid;
  place-content: $placeContent;
}

@mixin gridMinMax($min: 200, $fill: auto-fit) {
  display: grid;
  grid-template-columns: 1fr;

  @include mediaBreakpoint($min) {
    grid-template-columns: repeat($fill, minmax(#{$min + px}, 1fr));
  }
}

@mixin mainWidthBoundaries(
  $maxwidth: 1000px,
  $paddingInline: 1rem,
  $width: 100%
) {
  max-width: $maxwidth;
  width: $width;
  padding-inline: $paddingInline;
  margin-inline: auto;
  display: block;
}

@mixin fullDynHeight() {
  height: 100%;
  height: 100vh;
  height: -webkit-fill-available;
  height: -moz-fill-available;
  height: fill-available;
  height: 100dvh;
}

@mixin mediaBreakpoint($pixelSize) {
  @media (min-width: #{$pixelSize+px}) {
    @content;
  }
}

// @mixin containerBreakpoint($pixelSize, $containerType: inline-size) {
//   container-type: $containerType;
//   @container (min-width: #{$pixelSize+px}) {
//     @content;
//   }
// }

@mixin pseudoAfterCoverAll($bg: red) {
  position: relative;

  &::after {
    content: '';
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    background: $bg;
    @content;
  }
}

@mixin activeButton($scaleValue: 0.9) {
  &:active {
    scale: $scaleValue;
    @content;
  }
}

@mixin textoverflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
