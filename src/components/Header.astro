---
import '../styles/Header.scss';
import DarkModeIcon from '../components/icons/DarkModeIcon.astro';
import PaletteIcon from './icons/PaletteIcon.astro';
import { t } from 'i18next';
import { LanguageSelector } from 'astro-i18next/components';
---

<header class="header">
  <div class="header__bg">
    <section class="header__bounds">
      <div class="header__title">
        <h1><span>{t('site.title1')}</span><span>{t('site.title2')}</span></h1>
      </div>
      <nav id="headerNav" aria-label="menu" class="header__nav">
        <ul>
          <li class="header__lang" data-submenu>
            <LanguageSelector
              languageMapping={{ en: '', es: '', fr: '' }}
              class="header__lang_selector"
              showFlag={true}
            />
          </li>
          <li class="header__theme" data-submenu>
            <input type="checkbox" name="themeSwitch" id="themeSwitch" aria-label="Theme Selector"/>
            <label for="themeSwitch">
              <PaletteIcon />
            </label>
            <nav aria-expanded="false">
              <ul id="themeSwitch_list" class="header__themeList">
                <li>
                  <button class="color" data-theme="purple" aria-label="Purple theme">
                    <span></span>
                  </button>
                </li>
                <li>
                  <button class="color" data-theme="green" aria-label="Green theme">
                    <span></span>
                  </button>
                </li>
                <li>
                  <button class="color" data-theme="red" aria-label="Red theme">
                    <span></span>
                  </button>
                </li>
              </ul>
            </nav>
          </li>
          <li class="header__dark">
            <input type="checkbox" name="darkModeSwitch" id="darkModeSwitch" aria-label="Dark/Light Mode"/>
            <label for="darkModeSwitch">
              <DarkModeIcon />
            </label>
          </li>
        </ul>
      </nav>
    </section>
  </div>
</header>

<script>
  import { Helpers } from '../helpers/Helpers';
  import { localStorageKey } from '../helpers/data';

  // ==============
  // THEME SWITCH
  // ==============

  interface ColorThemeSwitchHandler {
    themeButtons: NodeListOf<HTMLButtonElement>;
  }

  class ColorThemeSwitchHandler {
    constructor(selector: string) {
      this.themeButtons = document
        .getElementById(selector)
        ?.querySelectorAll('button') as NodeListOf<HTMLButtonElement>;
      this.handleThemeSwitch();
    }

    handleThemeSwitch() {
      if (this.themeButtons) {
        for (let i = 0; i < this.themeButtons.length; i++) {
          const element = this.themeButtons[i];
          const color = element.dataset['theme'];
          element.addEventListener('click', (e) => {
            document.documentElement.dataset['themeGeneral'] = color;
            Helpers.getThemeUserPreference({ save: true });
          });
        }
      }
    }
  }

  // ==============
  // DARK MODE
  // ==============

  interface DarkModeSwitchHandler {
    darkModeCheckbox: HTMLInputElement;
  }

  class DarkModeSwitchHandler {
    constructor(selector: string) {
      this.darkModeCheckbox = document.getElementById(
        selector
      ) as HTMLInputElement;
      this.handleDarkModeSwitch();
    }

    handleDarkModeSwitch() {
      // SET CHECK EVENT
      this.darkModeCheckbox?.addEventListener('change', (e: Event) => {
        // GET CHECK VALUE
        let isDarkModeOn = (e.currentTarget as HTMLInputElement).checked;

        // IF CHECK CONDITION
        if (isDarkModeOn) {
          document.documentElement.dataset['mode'] = 'dark';
          this.darkModeCheckbox.nextElementSibling!.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
            <path d="M12 11.807A9.002 9.002 0 0 1 10.049 2a9.942 9.942 0 0 0-5.12 2.735c-3.905 3.905-3.905 10.237 0 14.142 3.906 3.906 10.237 3.905 14.143 0a9.946 9.946 0 0 0 2.735-5.119A9.003 9.003 0 0 1 12 11.807z"></path>
          </svg>
        `;
        } else {
          document.documentElement.dataset['mode'] = 'light';
          this.darkModeCheckbox.nextElementSibling!.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
            <path d="M20.742 13.045a8.088 8.088 0 0 1-2.077.271c-2.135 0-4.14-.83-5.646-2.336a8.025 8.025 0 0 1-2.064-7.723A1 1 0 0 0 9.73 2.034a10.014 10.014 0 0 0-4.489 2.582c-3.898 3.898-3.898 10.243 0 14.143a9.937 9.937 0 0 0 7.072 2.93 9.93 9.93 0 0 0 7.07-2.929 10.007 10.007 0 0 0 2.583-4.491 1.001 1.001 0 0 0-1.224-1.224zm-2.772 4.301a7.947 7.947 0 0 1-5.656 2.343 7.953 7.953 0 0 1-5.658-2.344c-3.118-3.119-3.118-8.195 0-11.314a7.923 7.923 0 0 1 2.06-1.483 10.027 10.027 0 0 0 2.89 7.848 9.972 9.972 0 0 0 7.848 2.891 8.036 8.036 0 0 1-1.484 2.059z"></path>
          </svg>
        `;
        }

        Helpers.getDarkModeUserPreference({ save: true });
      });
    }
  }

  // ==============
  // SUB MENU
  // ==============

  interface SubmenuHandler {
    submenuItems: NodeListOf<Element>;
    title: HTMLElement;
  }

  class SubmenuHandler {
    constructor() {
      this.submenuItems = document.querySelectorAll('[data-submenu]');
      this.title = document.querySelector('.header__title')!;
      this.init();
    }

    private init() {
      this.submenuItems.forEach((item) => {
        // const label = item.querySelector('label')!;
        const nav = item.querySelector('nav')!;
        const checkbox = item.querySelector(
          'input[type="checkbox"]'
        ) as HTMLInputElement;

        checkbox.addEventListener('change', () => {
          this.toggleSubMenu(nav, checkbox);
        });
      });

      // Add a global event listener to handle clicks outside the nav
      document.addEventListener('click', (event) =>
        this.handleOutsideClick(event)
      );
    }

    private toggleSubMenu(nav: Element, checkbox: HTMLInputElement) {
      const expanded = checkbox.checked;
      console.log(nav, expanded);

      // Close other open submenus
      this.submenuItems.forEach((item) => {
        const otherCheckbox = item.querySelector(
          'input[type="checkbox"]'
        ) as HTMLInputElement;
        const otherNav = item.querySelector('nav')!;

        if (nav !== otherNav && otherCheckbox.checked) {
          otherCheckbox.checked = false;
          otherNav.setAttribute('aria-expanded', 'false');
        }
      });

      // Toggle the current submenu
      nav.setAttribute('aria-expanded', expanded.toString());

      const mediaQueryDesktop = window.matchMedia('(max-width: 569px)');
      console.log(mediaQueryDesktop);
      mediaQueryDesktop.matches && expanded
        ? this.title.setAttribute('data-showMenuMobile', '')
        : this.title.removeAttribute('data-showMenuMobile');
    }

    private handleOutsideClick(event: Event) {
      const isOutsideNav = !(event.target as Element).closest('[data-submenu]');

      if (isOutsideNav) {
        this.closeAllSubmenus();
      }
    }

    private closeAllSubmenus() {
      this.submenuItems.forEach((item) => {
        const checkbox = item.querySelector(
          'input[type="checkbox"]'
        ) as HTMLInputElement;
        const nav = item.querySelector('nav')!;
        checkbox.checked = false;
        nav.setAttribute('aria-expanded', 'false');
      });
      this.title.removeAttribute('data-showMenuMobile');
    }
  }

  window.addEventListener('load', async (e) => {
    new DarkModeSwitchHandler('darkModeSwitch');
    new ColorThemeSwitchHandler('themeSwitch_list');
    const submenuHandler = new SubmenuHandler();

    const langButtons = document.querySelectorAll('button.lang');
    for (let i = 0; i < langButtons.length; i++) {
      const element = langButtons[i];
      element.addEventListener('click', async (e: Event) => {
        const target = e.target as HTMLButtonElement;
        const parent = target.parentNode as HTMLElement;
        const langValue = parent.attributes[0].value;
        switch (langValue) {
          case '/':
            document.documentElement.lang = 'en'
            break;
          case '/es':
          document.documentElement.lang = 'es'
            break;
          case '/fr':
          document.documentElement.lang = 'fr'
            break;
        }

        async function unloadLang(){
          await Helpers.getLangUserPreference({ save: true });
          window.location.href = langValue.slice(0);
        }

        unloadLang()
      });
    }
  });
</script>
